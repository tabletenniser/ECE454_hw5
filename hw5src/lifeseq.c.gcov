        -:    0:Source:lifeseq.c
        -:    0:Graph:lifeseq.gcno
        -:    0:Data:lifeseq.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*****************************************************************************
        -:    2: * life.c
        -:    3: * The original sequential implementation resides here.
        -:    4: * Do not modify this file, but you are encouraged to borrow from it
        -:    5: ****************************************************************************/
        -:    6:#include "life.h"
        -:    7:#include "util.h"
        -:    8:
        -:    9:/**
        -:   10: * Swapping the two boards only involves swapping pointers, not
        -:   11: * copying values.
        -:   12: */
        -:   13:#define SWAP_BOARDS( b1, b2 )  do { \
        -:   14:  char* temp = b1; \
        -:   15:  b1 = b2; \
        -:   16:  b2 = temp; \
        -:   17:} while(0)
        -:   18:
        -:   19:#define BOARD( __board, __i, __j )  (__board[(__i) + LDA*(__j)])
        -:   20:
        -:   21:
        -:   22:    char*
function sequential_game_of_life called 1 returned 100% blocks executed 93%
        1:   23:sequential_game_of_life (char* outboard, 
        -:   24:        char* inboard,
        -:   25:        const int nrows,
        -:   26:        const int ncols,
        -:   27:        const int gens_max)
        -:   28:{
        -:   29:    /* HINT: in the parallel decomposition, LDA may not be equal to
        -:   30:       nrows! */
        1:   31:    const int LDA = nrows;
        -:   32:    int curgen, i, j;
        -:   33:
     1001:   34:    for (curgen = 0; curgen < gens_max; curgen++)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   35:    {
        -:   36:        /* HINT: you'll be parallelizing these loop(s) by doing a
        -:   37:           geometric decomposition of the output */
  1024000:   38:        for (i = 0; i < nrows; i++)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   39:        {
1048576000:   40:            for (j = 0; j < ncols; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   41:            {
2097152000:   42:                const int inorth = mod (i-1, nrows);
2097152000:   43:                const int isouth = mod (i+1, nrows);
2097152000:   44:                const int jwest = mod (j-1, ncols);
2097152000:   45:                const int jeast = mod (j+1, ncols);
        -:   46:
8388608000:   47:                const char neighbor_count = 
1048576000:   48:                    BOARD (inboard, inorth, jwest) + 
1048576000:   49:                    BOARD (inboard, inorth, j) + 
1048576000:   50:                    BOARD (inboard, inorth, jeast) + 
1048576000:   51:                    BOARD (inboard, i, jwest) +
1048576000:   52:                    BOARD (inboard, i, jeast) + 
1048576000:   53:                    BOARD (inboard, isouth, jwest) +
1048576000:   54:                    BOARD (inboard, isouth, j) + 
1048576000:   55:                    BOARD (inboard, isouth, jeast);
        -:   56:
2097152000:   57:                BOARD(outboard, i, j) = alivep (neighbor_count, BOARD (inboard, i, j));
        -:   58:
        -:   59:            }
        -:   60:        }
     1000:   61:        SWAP_BOARDS( outboard, inboard );
        -:   62:
        -:   63:    }
        -:   64:    /* 
        -:   65:     * We return the output board, so that we know which one contains
        -:   66:     * the final result (because we've been swapping boards around).
        -:   67:     * Just be careful when you free() the two boards, so that you don't
        -:   68:     * free the same one twice!!! 
        -:   69:     */
        1:   70:    return inboard;
        -:   71:}
        -:   72:
        -:   73:
